group 'name.valery1707.test'
version '1.0-SNAPSHOT'

apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
	}
}

allprojects {
	repositories {
		mavenCentral()
	}
	buildscript {
		repositories {
			mavenCentral()
		}
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'jacoco'

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	dependencies {
		//Testing
		testCompile "junit:junit:4.12"
		testCompile "org.hamcrest:hamcrest-core:1.3"
		testCompile "org.hamcrest:hamcrest-library:1.3"
		testCompile "org.assertj:assertj-core:3.2.0"
	}
	jacocoTestReport {
		group = 'Coverage reports'
		description = 'Generates a test coverage report for a project'

		reports {
			xml.enabled = true
			html.enabled = true
		}
	}
}

// Only report code coverage for projects that are distrubuted
def publishedProjects = subprojects.findAll { it.path != ':test-app' }

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
	description = 'Generates an aggregate report from all subprojects'
	dependsOn(publishedProjects.test)

	additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
	sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
	classDirectories = files(publishedProjects.sourceSets.main.output)
	executionData = files(publishedProjects.jacocoTestReport.executionData)

	reports {
		html.enabled = true
		xml.enabled = true
	}

	doFirst {
		executionData = files(executionData.findAll { it.exists() })
	}
}
coveralls {
	sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
	jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}
tasks.coveralls {
	group = 'Coverage reports'
	description = 'Uploads the aggregated coverage report to Coveralls'

	dependsOn jacocoRootReport
	onlyIf { System.env.'CI' }
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.9'
}
